# C-b is not acceptable -- Vim uses it.
unbind C-b
set -g prefix C-a

# -T selects the keyspace to use.
# prefix means the prefix has been pressed first
# root means no key has been pressed first.

# Open new windows even if I'm still holding the control key from the prefix.
bind -T prefix C-c new-window

# C-a a sends "C-a".
bind -T prefix a send-prefix

# Quickly switch between the current window and the last window that was
# active.
# Try both C-a w and C-a C-a to see which sticks.
bind -T prefix w last-window
bind -T prefix C-a last-window

# Choose a buffer to paste interactively
bind -T prefix b choose-buffer
# Save the contents of a buffer chosen interactively
bind -T prefix B choose-buffer "command-prompt -I \"save-buffer -b '%%' /tmp/tmux-buffer\""
# Load the tmux buffer from the X clipboard and paste it in.
bind -T prefix p run "xclip -o | tmux load-buffer - ; tmux paste-buffer"
# Send the tmux buffer contents to the X clipboard
bind -T prefix y run "tmux save-buffer - | xsel -b"

# "Rotate", but opposite of prefix-o
bind -T prefix r select-pane -t :.+
# Same as above, but next to 'o' so maybe easier to use/remember.
bind -r -T prefix i select-pane -t :.+
bind -r -T prefix C-i select-pane -t :.+
bind -r -T prefix o select-pane -t :.-
bind -r -T prefix C-o select-pane -t :.-

# Normally C-a w does this, but I've overwritten that, so use the capital W instead.
bind -T prefix W choose-tree -w
bind -T prefix / command-prompt "find-window '%%'"
bind -T prefix A command-prompt "rename-window '%%'"
bind -T prefix N command-prompt "swap-window -t '%%'"

# Reload the config.
bind -T prefix R source-file ~/.tmux.conf \; display "Reloaded!"

# Kill windows, panes, and sessions
bind -T prefix K confirm-before -p "kill-window #W? (y/n)" kill-window
bind -T prefix x confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind -T prefix X confirm-before -p "kill-session #S? (y/n)" kill-session

# Join/Send panes
bind -T prefix J command-prompt -p "Join pane from:"  "join-pane -s :'%%'"
bind -T prefix S command-prompt -p "Send pane to:"  "join-pane -t :'%%'"
# Join a pane interactively. It's next to '!' since it undoes that command.
bind -T prefix @ choose-tree 'join-pane -h -s "%%"'
# Do the join with a vertical split
bind -T prefix C-@ choose-tree 'join-pane -s "%%"'

# Split vertically _and_ preserve the current directory (as opposed to %)
bind -T prefix | split-window -h -c '#{pane_current_path}'
# Same as above, but works without pressing shift
bind -T prefix \\ split-window -h -c '#{pane_current_path}'
# Split horizontally _and_ preserve the current directory (as opposed to ")
bind -T prefix - split-window -v -c '#{pane_current_path}'

# Move around with Vim-like keybindings.
bind -T prefix h select-pane -L
bind -T prefix l select-pane -R
bind -T prefix k select-pane -U
bind -T prefix j select-pane -D
# Move around with Vim-like keybindings; same as above, but easier in case I am
# still holding the ctrl key.
bind -T prefix C-h select-pane -L
bind -T prefix C-l select-pane -R
bind -T prefix C-k select-pane -U
bind -T prefix C-j select-pane -D
# Move between panes, but will arrow keys and no prefix.
bind -T root M-Left select-pane -L
bind -T root M-Right select-pane -R
bind -T root M-Up select-pane -U
bind -T root M-Down select-pane -D
# smart pane switching with awareness of Vim splits.
#bind -T prefix h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-a h) || tmux select-pane -L"
#bind -T prefix j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-a j) || tmux select-pane -D"
#bind -T prefix k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-a k) || tmux select-pane -U"
#bind -T prefix l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-a l) || tmux select-pane -R"

# Move panes around.
bind -T prefix M-h rotate-window -D
bind -T prefix M-l rotate-window -U
bind -T prefix M-k swap-pane -U
bind -T prefix M-j swap-pane -D

# Switch between windows
bind -T root C-Left previous-window
bind -T root C-Right next-window

# Move windows around
bind -r -T prefix "<" swap-window -d -t -1
bind -r -T prefix ">" swap-window -d -t +1

# Turn on mouse control and make it a little easier to select text into the
# clipboard.
set -g mouse on
set -s set-clipboard off
# I'm trying this with only copy-pipe, but might want to change it to either copy-pipe-and-cancel OR copy-pipe followed by send -X clear-selection to stay in copy mode, but clear the text selection.
# See: https://unix.stackexchange.com/questions/348913/copy-selection-to-a-clipboard-in-tmux
bind -T copy-mode-vi MouseDragEnd1Pane display "Copied selection." \; send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"
# bind -T copy-mode-vi MouseDragEnd1Pane display "Copied selection." \; send-keys -X copy-pipe "xclip -selection clipboard -i"
# bind -T copy-mode-vi MouseDragEnd1Pane display "Copied selection." \; send-keys -X copy-pipe "xclip -selection clipboard -i" \; send -X clear-selection
bind -T copy-mode MouseDragEnd1Pane display "Copied selection." \; send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"

bind -T copy-mode-vi v begin-selection
bind -T copy-mode-vi y copy-selection

setw -g mode-keys vi

# Change these to get rid of icons for activity/bells/silence.
setw -g monitor-activity on
setw -g monitor-bell on
setw -g monitor-silence 0
# Don't mess up the formatting with activity/bells.
setw -g window-status-activity-style ''
setw -g window-status-bell-style ''
# Don't print a message for activity, bells, or silence.
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off

set -g display-time 2000

set -g status-keys emacs
set -g base-index 1
setw -g pane-base-index 1
set -g history-limit 10000
set -g set-titles on
# set -g set-titles-string  '#W#F        #T'
set -g set-titles-string '#H:#S.#I.#P #W#F #T' # window number, program name, active(or not)
set -g display-panes-time 2000
set -g aggressive-resize on
setw -g automatic-rename on

set -g pane-border-style 'fg=#14BFB9,bg=#011C26'
set -g pane-active-border-style 'fg=#14BFB9,bg=#011C26'

# Status bar base/default settings.
set -g status-bg '#202020'
set -g status-fg '#44D4E8'
# These are overriden in the 'block' style, but apply to the 'screen' style.
set -g window-status-last-style "fg=#c973ff"
set -g window-status-current-style "fg=red,bold"
set -g status-interval 5
set -g window-status-separator ' '

# Status left
set -g status-left-length 30
set -g status-left ""
set -ga status-left "#[fg=#202020,bg=#5fcef1][#S]#[fg=#5fcef1,bg=#404040]ÓÇ∞ "
set -ga status-left "#[fg=#f1dc8e,bg=#404040]#{?client_prefix,#[fg=underline]^a,  }#[bg=#202020,fg=#404040]ÓÇ∞ "

# Status Right
set -g status-right-length 60
set -g status-right ""
set -ga status-right "#[fg=#5fcef1] ÓÇ≤#[bg=#5fcef1,fg=#202020] %d/%m/%y %H:%M "

# Set the current window status format -- Screen style
set -g window-status-current-format '#{window_index} #{window_name}'
set -ga window-status-current-format '#{?window_zoomed_flag,(+),}'
set -ga window-status-current-format '#{?window_activity_flag,üî•,}'
set -ga window-status-current-format '#{?window_silence_flag,‚ùÑÔ∏è ,}'
set -ga window-status-current-format '#{?window_bell_flag,üîî,}'

# Set the window status format -- Screen style
set -g window-status-format '#{window_index} #{window_name}'
set -ga window-status-format '#{?window_zoomed_flag,(+),}'
set -ga window-status-format '#{?window_activity_flag,üî•,}'
set -ga window-status-format '#{?window_silence_flag,‚ùÑÔ∏è ,}'
set -ga window-status-format '#{?window_bell_flag,üîî,}'

# Set the current window status format -- Block style
# Deep cyan: #0c9bc7
# Reddish-pink: #e12050
set -g window-status-current-format ''
set -ga window-status-current-format '#[fg=#e12050,bg=#202020]‚ñê'
set -ga window-status-current-format '#[fg=#ffffff,bg=#e12050]#{window_index}'
set -ga window-status-current-format '#[fg=#e12050,bg=#777777]‚ñå'
set -ga window-status-current-format '#[fg=#eeeeee,bg=#777777]#{window_name}'
set -ga window-status-current-format '#{?window_zoomed_flag,(+),}'
set -ga window-status-current-format '#{?window_activity_flag,üî•,}'
set -ga window-status-current-format '#{?window_silence_flag,‚ùÑÔ∏è ,}'
set -ga window-status-current-format '#{?window_bell_flag,üîî,}'
set -ga window-status-current-format '#[fg=#777777,bg=#202020]‚ñå'

# Set the window status format -- Block style
set -g window-status-format ''
set -ga window-status-format '#[fg=#{?window_last_flag,#688f9a,#444444},bg=#202020]‚ñê'
set -ga window-status-format '#[fg=#ffffff,bg=#{?window_last_flag,#688f9a,#444444}]#{window_index}'
set -ga window-status-format '#[fg=#{?window_last_flag,#688f9a,#444444},bg=#777777]‚ñå'
set -ga window-status-format '#[fg=#eeeeee,bg=#777777]#{window_name}'
set -ga window-status-format '#{?window_zoomed_flag,(+),}'
set -ga window-status-format '#{?window_activity_flag,üî•,}'
set -ga window-status-format '#{?window_silence_flag,‚ùÑÔ∏è ,}'
set -ga window-status-format '#{?window_bell_flag,üîî,}'
set -ga window-status-format '#[fg=#777777,bg=#202020]‚ñå'

set -g default-terminal "xterm-256color"
set -ga terminal-overrides ",*256col*:Tc"

# Restore sessions for vim. Only works with the resurrect plugin.
set -g @resurrect-strategy-vim 'session'
